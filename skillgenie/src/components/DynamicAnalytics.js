import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import {
  TrendingUp,
  DollarSign,
  Users,
  Briefcase,
  Target,
  Award,
  BarChart2,
  PieChart,
  Activity,
  Loader,
  MapPin,
  Search
} from 'lucide-react';
import { Line, Bar, Doughnut, Radar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  RadialLinearScale,
  Title,
  Tooltip,
  Legend,
  Filler
} from 'chart.js';
import roadmapService from '../services/roadmapService';

// Register ChartJS components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  RadialLinearScale,
  Title,
  Tooltip,
  Legend,
  Filler
);

const DynamicAnalytics = () => {
  const [selectedSkill, setSelectedSkill] = useState('');
  const [selectedLocation, setSelectedLocation] = useState('USA');
  const [analytics, setAnalytics] = useState(null);
  const [loading, setLoading] = useState(false);

  const popularSkills = [
    'Mobile Development', 'Data Science', 'Python', 'JavaScript', 'React',
    'Machine Learning', 'Web Development', 'iOS Development', 'Android Development',
    'Node.js', 'Java', 'C++', 'Go', 'Rust', 'DevOps', 'Cloud Computing', 'Flutter'
  ];

  const locations = [
    'Global', 'USA', 'UK', 'Canada', 'Germany', 'India', 'Australia',
    'Singapore', 'Japan', 'Netherlands', 'Sweden', 'Switzerland'
  ];

  const fetchAnalytics = async () => {
    if (!selectedSkill) {
      alert('Please select a skill first');
      return;
    }
    
    setLoading(true);
    console.log(`📊 Frontend: Fetching analytics for "${selectedSkill}" in ${selectedLocation}`);
    
    try {
      const result = await roadmapService.generateDynamicAnalytics(selectedSkill, selectedLocation);
      console.log('Frontend: Received analytics response:', result);
      
      if (result.success && result.data) {
        console.log(`✅ Frontend: Analytics generated for ${result.data.skill}`);
        console.log(`   Location: ${result.data.location}`);
        console.log(`   Generated by: ${result.generatedBy || 'Unknown'}`);
        setAnalytics(result.data);
      } else {
        console.error('❌ Frontend: Analytics generation failed', result);
        alert(`Failed to fetch analytics for ${selectedSkill}`);
      }
    } catch (error) {
      console.error('❌ Frontend Error fetching analytics:', error);
      alert(`Error fetching analytics for ${selectedSkill}: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    // Don't auto-fetch on mount, wait for user to select skill
    // fetchAnalytics();
  }, []);

  const handleSearch = () => {
    if (selectedSkill) {
      fetchAnalytics();
    }
  };

  // Prepare chart data
  const salaryProgressionData = analytics?.graphData?.salaryProgression ? {
    labels: analytics.graphData.salaryProgression.map(item => `Year ${item.year}`),
    datasets: [
      {
        label: 'Salary ($)',
        data: analytics.graphData.salaryProgression.map(item => item.salary),
        borderColor: 'rgb(59, 130, 246)',
        backgroundColor: 'rgba(59, 130, 246, 0.1)',
        tension: 0.4,
        fill: true
      }
    ]
  } : null;

  const demandTrendData = analytics?.graphData?.demandTrend ? {
    labels: analytics.graphData.demandTrend.map(item => item.month),
    datasets: [
      {
        label: 'Demand Index',
        data: analytics.graphData.demandTrend.map(item => item.demand),
        backgroundColor: 'rgba(34, 197, 94, 0.6)',
        borderColor: 'rgb(34, 197, 94)',
        borderWidth: 2
      }
    ]
  } : null;

  const skillDistributionData = analytics?.graphData?.skillDistribution ? {
    labels: analytics.graphData.skillDistribution.map(item => item.skill),
    datasets: [
      {
        label: 'Skill Requirement %',
        data: analytics.graphData.skillDistribution.map(item => item.percentage),
        backgroundColor: [
          'rgba(59, 130, 246, 0.6)',
          'rgba(168, 85, 247, 0.6)',
          'rgba(236, 72, 153, 0.6)',
          'rgba(34, 197, 94, 0.6)'
        ],
        borderColor: [
          'rgb(59, 130, 246)',
          'rgb(168, 85, 247)',
          'rgb(236, 72, 153)',
          'rgb(34, 197, 94)'
        ],
        borderWidth: 2
      }
    ]
  } : null;

  const requiredSkillsData = analytics?.requiredSkills ? {
    labels: analytics.requiredSkills.map(item => item.skill),
    datasets: [
      {
        label: 'Demand %',
        data: analytics.requiredSkills.map(item => item.demand),
        backgroundColor: 'rgba(251, 146, 60, 0.4)',
        borderColor: 'rgb(251, 146, 60)',
        pointBackgroundColor: 'rgb(251, 146, 60)',
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: 'rgb(251, 146, 60)'
      }
    ]
  } : null;

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: true,
        position: 'top'
      }
    },
    scales: {
      y: {
        beginAtZero: true
      }
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
          <h1 className="text-3xl font-bold text-gray-800 mb-6 flex items-center gap-3">
            <BarChart2 className="w-10 h-10 text-blue-500" />
            AI-Powered Market Analytics
          </h1>

          <div className="grid md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Select Skill
              </label>
              <select
                value={selectedSkill}
                onChange={(e) => setSelectedSkill(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                {popularSkills.map(skill => (
                  <option key={skill} value={skill}>{skill}</option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Location
              </label>
              <select
                value={selectedLocation}
                onChange={(e) => setSelectedLocation(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                {locations.map(loc => (
                  <option key={loc} value={loc}>{loc}</option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">&nbsp;</label>
              <button
                onClick={handleSearch}
                disabled={loading}
                className="w-full px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold rounded-lg hover:from-blue-600 hover:to-purple-700 transition-all disabled:opacity-50 flex items-center justify-center gap-2"
              >
                {loading ? (
                  <>
                    <Loader className="w-5 h-5 animate-spin" />
                    Analyzing...
                  </>
                ) : (
                  <>
                    <Search className="w-5 h-5" />
                    Analyze Market
                  </>
                )}
              </button>
            </div>
          </div>
        </div>

        {loading && (
          <div className="flex items-center justify-center py-20">
            <div className="text-center">
              <Loader className="w-12 h-12 animate-spin text-blue-500 mx-auto mb-4" />
              <p className="text-gray-600">Generating market analytics with AI...</p>
            </div>
          </div>
        )}

        {analytics && !loading && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.6 }}
          >
            {/* Market Overview Cards */}
            <div className="grid md:grid-cols-3 lg:grid-cols-6 gap-4 mb-6">
              <div className="bg-white rounded-xl shadow-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <TrendingUp className="w-8 h-8 text-green-500" />
                </div>
                <p className="text-sm text-gray-600">Demand Level</p>
                <p className="text-2xl font-bold text-gray-800">{analytics.marketOverview?.demandLevel}</p>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <Activity className="w-8 h-8 text-blue-500" />
                </div>
                <p className="text-sm text-gray-600">Growth Rate</p>
                <p className="text-2xl font-bold text-gray-800">{analytics.marketOverview?.growthRate}</p>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <DollarSign className="w-8 h-8 text-yellow-500" />
                </div>
                <p className="text-sm text-gray-600">Avg Salary</p>
                <p className="text-2xl font-bold text-gray-800">{analytics.marketOverview?.averageSalary}</p>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <Briefcase className="w-8 h-8 text-purple-500" />
                </div>
                <p className="text-sm text-gray-600">Job Openings</p>
                <p className="text-2xl font-bold text-gray-800">{analytics.marketOverview?.jobOpenings}</p>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <Users className="w-8 h-8 text-red-500" />
                </div>
                <p className="text-sm text-gray-600">Competition</p>
                <p className="text-2xl font-bold text-gray-800">{analytics.marketOverview?.competitionLevel}</p>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <MapPin className="w-8 h-8 text-indigo-500" />
                </div>
                <p className="text-sm text-gray-600">Location</p>
                <p className="text-2xl font-bold text-gray-800">{analytics.location}</p>
              </div>
            </div>

            {/* Charts Grid */}
            <div className="grid md:grid-cols-2 gap-6 mb-6">
              {/* Salary Progression Chart */}
              {salaryProgressionData && (
                <div className="bg-white rounded-xl shadow-lg p-6">
                  <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                    <DollarSign className="w-5 h-5 text-green-500" />
                    Salary Progression
                  </h3>
                  <div style={{ height: '300px' }}>
                    <Line data={salaryProgressionData} options={chartOptions} />
                  </div>
                </div>
              )}

              {/* Demand Trend Chart */}
              {demandTrendData && (
                <div className="bg-white rounded-xl shadow-lg p-6">
                  <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                    <TrendingUp className="w-5 h-5 text-blue-500" />
                    Demand Trend
                  </h3>
                  <div style={{ height: '300px' }}>
                    <Bar data={demandTrendData} options={chartOptions} />
                  </div>
                </div>
              )}

              {/* Skill Distribution Chart */}
              {skillDistributionData && (
                <div className="bg-white rounded-xl shadow-lg p-6">
                  <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                    <PieChart className="w-5 h-5 text-purple-500" />
                    Skill Distribution
                  </h3>
                  <div style={{ height: '300px' }}>
                    <Doughnut data={skillDistributionData} options={{ ...chartOptions, maintainAspectRatio: true }} />
                  </div>
                </div>
              )}

              {/* Required Skills Radar */}
              {requiredSkillsData && (
                <div className="bg-white rounded-xl shadow-lg p-6">
                  <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                    <Target className="w-5 h-5 text-orange-500" />
                    Required Skills
                  </h3>
                  <div style={{ height: '300px' }}>
                    <Radar data={requiredSkillsData} options={chartOptions} />
                  </div>
                </div>
              )}
            </div>

            {/* Top Companies */}
            {analytics.topCompanies && analytics.topCompanies.length > 0 && (
              <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
                <h3 className="text-lg font-semibold text-gray-800 mb-4">Top Hiring Companies</h3>
                <div className="grid md:grid-cols-5 gap-4">
                  {analytics.topCompanies.map((company, index) => (
                    <div key={index} className="p-4 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg">
                      <p className="font-semibold text-gray-800">{company.name}</p>
                      <p className="text-sm text-gray-600">{company.openings} openings</p>
                      <p className="text-sm font-medium text-blue-600">{company.averageSalary}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Career Paths */}
            {analytics.careerPaths && analytics.careerPaths.length > 0 && (
              <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
                <h3 className="text-lg font-semibold text-gray-800 mb-4">Career Progression</h3>
                <div className="space-y-3">
                  {analytics.careerPaths.map((path, index) => (
                    <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                      <div className="flex items-center gap-4">
                        <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold">
                          {index + 1}
                        </div>
                        <div>
                          <p className="font-semibold text-gray-800">{path.role}</p>
                          <p className="text-sm text-gray-600">{path.experience}</p>
                        </div>
                      </div>
                      <p className="text-lg font-bold text-green-600">{path.salary}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Industry Trends */}
            {analytics.industryTrends && analytics.industryTrends.length > 0 && (
              <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
                <h3 className="text-lg font-semibold text-gray-800 mb-4">Industry Trends</h3>
                <div className="grid md:grid-cols-3 gap-4">
                  {analytics.industryTrends.map((trend, index) => (
                    <div key={index} className="p-4 border-l-4 border-blue-500 bg-blue-50 rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <p className="font-semibold text-gray-800">{trend.trend}</p>
                        <span className={`px-2 py-1 rounded text-xs font-medium ${
                          trend.impact === 'High' ? 'bg-red-100 text-red-700' :
                          trend.impact === 'Medium' ? 'bg-yellow-100 text-yellow-700' :
                          'bg-green-100 text-green-700'
                        }`}>
                          {trend.impact}
                        </span>
                      </div>
                      <p className="text-sm text-gray-600">{trend.description}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Future Outlook */}
            {analytics.futureOutlook && (
              <div className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-lg font-semibold text-gray-800 mb-4">Future Outlook</h3>
                <div className="grid md:grid-cols-3 gap-6">
                  <div className="text-center p-4 bg-gradient-to-br from-green-50 to-emerald-50 rounded-lg">
                    <TrendingUp className="w-8 h-8 text-green-500 mx-auto mb-2" />
                    <p className="font-semibold text-gray-800">Market Projection</p>
                    <p className="text-2xl font-bold text-green-600">{analytics.futureOutlook.projection}</p>
                  </div>
                  <div className="text-center p-4 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg">
                    <Activity className="w-8 h-8 text-blue-500 mx-auto mb-2" />
                    <p className="font-semibold text-gray-800">Automation Risk</p>
                    <p className="text-2xl font-bold text-blue-600">{analytics.futureOutlook.automationRisk}</p>
                  </div>
                  <div className="p-4 bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg">
                    <Target className="w-8 h-8 text-purple-500 mb-2" />
                    <p className="font-semibold text-gray-800 mb-2">Emerging Areas</p>
                    <div className="space-y-1">
                      {analytics.futureOutlook.emergingAreas?.map((area, index) => (
                        <p key={index} className="text-sm text-gray-700">• {area}</p>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </motion.div>
        )}
      </div>
    </div>
  );
};

export default DynamicAnalytics;

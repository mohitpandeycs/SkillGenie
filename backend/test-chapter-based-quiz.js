require('dotenv').config();
const workingGeminiService = require('./services/workingGeminiService');

async function testChapterBasedQuizGeneration() {
  console.log('🗺️ Testing Chapter-Based Quiz Generation...\n');

  // Mock chapter data similar to what would come from roadmap
  const testChapterData = {
    id: 1,
    title: "JavaScript Variables and Functions",
    description: "Learn how to declare variables, understand scope, and create functions in JavaScript",
    difficulty: "Beginner",
    duration: "3 weeks",
    topics: [
      "Variable declaration with var, let, const",
      "Function syntax and parameters", 
      "Scope and hoisting",
      "Arrow functions",
      "Function expressions vs declarations"
    ],
    subChapters: [
      { title: "Variable Declaration", completed: true },
      { title: "Function Basics", completed: true },
      { title: "Scope Concepts", completed: false },
      { title: "Advanced Functions", completed: false }
    ],
    resources: [
      { title: "MDN JavaScript Variables", type: "documentation" },
      { title: "JavaScript Functions Tutorial", type: "video" }
    ]
  };

  console.log('📋 Testing with chapter data:');
  console.log(`Title: ${testChapterData.title}`);
  console.log(`Topics: ${testChapterData.topics.join(', ')}`);
  console.log(`Sub-chapters: ${testChapterData.subChapters.map(sc => sc.title).join(', ')}`);
  console.log('='.repeat(70));
  
  try {
    const startTime = Date.now();
    const quizResult = await workingGeminiService.generateChapterBasedQuiz(
      'JavaScript', 
      'Chapter 1',
      'medium',
      testChapterData
    );
    const endTime = Date.now();
    
    if (quizResult.success) {
      console.log(`✅ Chapter-based quiz generated successfully in ${endTime - startTime}ms`);
      console.log(`📊 Generated by: ${quizResult.generatedBy}`);
      console.log(`🤖 AI Generated: ${quizResult.aiGenerated ? 'Yes' : 'No (Fallback)'}`);
      console.log(`🗺️ Chapter-based: ${quizResult.chapterBased ? 'Yes' : 'No'}`);
      console.log(`📝 Chapter Title: ${quizResult.chapter_title}`);
      console.log(`📖 Chapter Description: ${quizResult.chapter_description}`);
      console.log(`🎯 Topics Covered: ${quizResult.topics_covered?.join(', ')}`);
      console.log(`❓ Questions: ${quizResult.questions.length}`);
      
      // Analyze questions for chapter relevance
      let chapterSpecificCount = 0;
      let topicsCoveredCount = 0;
      
      console.log('\n📋 Question Analysis:');
      quizResult.questions.slice(0, 5).forEach((q, index) => {
        console.log(`\n${index + 1}. ${q.question}`);
        console.log(`   Options: ${q.options.join(' | ')}`);
        console.log(`   Correct: ${q.options[q.correct]} (${q.correct})`);
        console.log(`   Chapter Topic: ${q.chapter_topic}`);
        console.log(`   Sub-chapter: ${q.sub_chapter || 'N/A'}`);
        console.log(`   Explanation: ${q.explanation}`);
        
        // Check if question is chapter-specific
        const questionText = (q.question + q.options.join(' ') + q.explanation).toLowerCase();
        
        // Check for chapter-specific content
        if (questionText.includes('variable') || questionText.includes('function') || 
            questionText.includes('scope') || questionText.includes('const') || 
            questionText.includes('let') || questionText.includes('var')) {
          chapterSpecificCount++;
        }
        
        // Check if it covers the defined topics
        testChapterData.topics.forEach(topic => {
          if (questionText.includes(topic.toLowerCase().substring(0, 10))) {
            topicsCoveredCount++;
          }
        });
      });
      
      console.log(`\n📈 Chapter Relevance: ${chapterSpecificCount}/5 questions are chapter-specific`);
      console.log(`🎯 Topic Coverage: ${topicsCoveredCount}/5 questions cover defined topics`);
      
      if (chapterSpecificCount >= 3) {
        console.log('✅ SUCCESS: Questions appear to be based on actual chapter content!');
      } else {
        console.log('❌ WARNING: Questions may not be sufficiently chapter-specific');
      }
      
      // Test fallback comparison
      console.log('\n' + '='.repeat(70));
      console.log('📊 Comparing with generic quiz...');
      
      const genericQuiz = await workingGeminiService.generateQuiz(
        'JavaScript', 
        'Chapter 1',
        'medium'
      );
      
      if (genericQuiz.success) {
        console.log(`Generic quiz generated by: ${genericQuiz.generatedBy}`);
        console.log(`Sample generic question: ${genericQuiz.questions[0]?.question}`);
        
        const isGenericDifferent = quizResult.questions[0]?.question !== genericQuiz.questions[0]?.question;
        console.log(`Different from generic: ${isGenericDifferent ? '✅ Yes' : '❌ No (Problem!)'}`);
      }
      
    } else {
      console.log('❌ Chapter-based quiz generation failed');
      console.log('Error:', quizResult.error || 'Unknown error');
    }
    
  } catch (error) {
    console.log(`❌ Test failed:`, error.message);
  }
  
  console.log('\n🏁 Chapter-Based Quiz Test Complete!');
  console.log('\n💡 Expected Results:');
  console.log('   ✅ Questions should be based on actual chapter content');
  console.log('   ✅ Questions should cover the defined topics');
  console.log('   ✅ Should be different from generic skill-based quiz');
  console.log('   ✅ Should reference sub-chapters and specific concepts');
}

// Run the test
testChapterBasedQuizGeneration().catch(console.error);

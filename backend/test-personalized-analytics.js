require('dotenv').config();
const workingGeminiService = require('./services/workingGeminiService');

async function testPersonalizedAnalytics() {
  console.log('üìä Testing Personalized Analytics Generation...\n');

  // Mock user profile data from questionnaire
  const mockUserProfile = {
    education: 'bachelor',
    experience: 'some_experience',
    skills: ['Python', 'SQL'],
    interests: ['Machine Learning', 'Data Analysis'],
    careerGoals: 'Become a data scientist at a tech company',
    preferredDomains: ['ai_ml', 'data_science']
  };

  const testCases = [
    { skill: 'Data Science', location: 'India', userProfile: mockUserProfile },
    { skill: 'Machine Learning', location: 'USA', userProfile: mockUserProfile },
    { skill: 'Web Development', location: 'India', userProfile: null }, // No profile
  ];

  for (const testCase of testCases) {
    console.log(`üéØ Testing: ${testCase.skill} in ${testCase.location}`);
    console.log(`üë§ User Profile: ${testCase.userProfile ? 'Yes' : 'No'}`);
    console.log('='.repeat(70));
    
    try {
      const startTime = Date.now();
      const analyticsResult = await workingGeminiService.generateAnalytics(
        testCase.skill,
        testCase.location,
        testCase.userProfile
      );
      const endTime = Date.now();
      
      if (analyticsResult.success) {
        console.log(`‚úÖ Analytics generated successfully in ${endTime - startTime}ms`);
        console.log(`üìä Generated by: ${analyticsResult.data.generatedBy}`);
        console.log(`ü§ñ AI Generated: ${analyticsResult.data.aiGenerated ? 'Yes' : 'No (Fallback)'}`);
        console.log(`üë§ Personalized: ${analyticsResult.data.personalized ? 'Yes' : 'No'}`);
        
        // Check market overview
        const market = analyticsResult.data.marketOverview;
        console.log(`\nüíº Market Overview:`);
        console.log(`   Average Salary: ${market.averageSalary}`);
        console.log(`   Growth Rate: ${market.growthRate}%`);
        console.log(`   Demand Score: ${market.demandScore}/10`);
        console.log(`   Description: ${market.marketDescription}`);
        
        // Check personalized insights
        if (analyticsResult.data.personalizedInsights) {
          const insights = analyticsResult.data.personalizedInsights;
          console.log(`\nüéØ Personalized Insights:`);
          console.log(`   Alignment Score: ${insights.alignmentScore}%`);
          console.log(`   Time to Job Ready: ${insights.timeToJobReady}`);
          console.log(`   Salary Potential: ${insights.salaryPotential}`);
          console.log(`   Skill Gaps: ${insights.skillGaps?.join(', ') || 'None'}`);
          console.log(`   Recommended Focus: ${insights.recommendedFocus}`);
          
          // Verify personalization
          if (testCase.userProfile && insights.skillGaps) {
            const hasPersonalizedGaps = insights.skillGaps.some(gap => 
              !testCase.userProfile.skills.includes(gap)
            );
            console.log(`   ‚úÖ Skill gaps are personalized: ${hasPersonalizedGaps ? 'Yes' : 'No'}`);
          }
        }
        
        // Check if salary is location-appropriate
        const isLocationAppropriate = 
          (testCase.location === 'India' && market.averageSalary.includes('‚Çπ')) ||
          (testCase.location === 'USA' && market.averageSalary.includes('$'));
        console.log(`   ‚úÖ Location-appropriate currency: ${isLocationAppropriate ? 'Yes' : 'No'}`);
        
        // Check actionable recommendations
        if (analyticsResult.data.actionableRecommendations) {
          console.log(`\nüìã Actionable Recommendations:`);
          analyticsResult.data.actionableRecommendations.slice(0, 2).forEach((rec, i) => {
            console.log(`   ${i + 1}. ${rec.action} (${rec.priority} priority)`);
            console.log(`      Timeline: ${rec.timeline}`);
            console.log(`      Reason: ${rec.personalizedReason}`);
          });
        }
        
        // Check if data differs for different skills
        if (testCase.skill === 'Data Science') {
          // Store for comparison
          global.datascienceAnalytics = analyticsResult.data;
        } else if (testCase.skill === 'Web Development' && global.datascienceAnalytics) {
          const isDifferent = 
            analyticsResult.data.marketOverview.averageSalary !== 
            global.datascienceAnalytics.marketOverview.averageSalary;
          console.log(`   ‚úÖ Different from Data Science analytics: ${isDifferent ? 'Yes' : 'No'}`);
        }
        
      } else {
        console.log('‚ùå Analytics generation failed');
        console.log('Error:', analyticsResult.error || 'Unknown error');
      }
      
    } catch (error) {
      console.log(`‚ùå Test failed for ${testCase.skill}:`, error.message);
    }
    
    console.log('\n' + '='.repeat(70) + '\n');
  }
  
  console.log('üèÅ Personalized Analytics Test Complete!');
  console.log('\nüí° Expected Results:');
  console.log('   ‚úÖ Analytics should be skill-specific (different for each skill)');
  console.log('   ‚úÖ Should use correct currency for location');
  console.log('   ‚úÖ Should provide personalized insights based on user profile');
  console.log('   ‚úÖ Should identify skill gaps based on user\'s current skills');
  console.log('   ‚úÖ Should provide actionable recommendations');
}

// Run the test
testPersonalizedAnalytics().catch(console.error);
